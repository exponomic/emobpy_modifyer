import os
import pandas as pd

# Funktion zur Bestimmung, ob die Uhrzeit in einer Hochpreisphase liegt
def check_high_tariff(time_str):
    if isinstance(time_str, str):
        hour = int(time_str.split()[1].split(':')[0])
        # Hochpreisphasen: 06:00-09:00 und 18:00-20:00
        if (6 <= hour < 9) or (18 <= hour < 20):
            return 'HT'
        else:
            return ''
    return ''

# Funktion zur degressiven Verteilung der Differenz
def distribute_excess(df, idx, excess, max_value, sum_column):
    while excess > 0 and idx < len(df) - 1:
        idx += 1
        if df.loc[idx, 'HT'] == '':  # Nur auf Zeilen ohne HT anwenden
            remaining_capacity = max_value - df.loc[idx, sum_column]
            if remaining_capacity > 0:
                # Verteile so viel wie möglich auf die nächste Zeile
                if excess <= remaining_capacity:
                    df.loc[idx, sum_column] += excess
                    excess = 0
                else:
                    df.loc[idx, sum_column] += remaining_capacity
                    excess -= remaining_capacity
    return df

# Funktion zum Entfernen führender 0,0-Werte in der HT-Liste
def remove_leading_zeros(ht_values):
    return [value for value in ht_values if value != 0.0]

# Ordnerpfade
input_folder = '/Users/florianliebenguth/Desktop/Programming/emobpy_modifyer/Input_Mod'
output_folder = '/Users/florianliebenguth/Desktop/Programming/emobpy_modifyer/Output_Mod'

# Überprüfen, ob der Output-Ordner existiert, wenn nicht, erstellen
if not os.path.exists(output_folder):
    os.makedirs(output_folder)

# Liste aller Dateien im Input-Ordner
input_files = os.listdir(input_folder)

# Verarbeiten jeder Datei im Input-Ordner
for file_name in input_files:
    # Systemdateien wie .DS_Store überspringen
    if file_name == '.DS_Store':
        continue

    print(f"Verarbeite Datei: {file_name}")

    # Vollständigen Pfad zur Datei erstellen
    input_file_path = os.path.join(input_folder, file_name)
    
    # CSV-Datei laden, die Komma als Dezimaltrennzeichen verwendet (Semikolon als Trennzeichen)
    print("Lade Input-Datei...")
    df_input = pd.read_csv(input_file_path, header=None, sep=';', decimal=',', encoding='ISO-8859-1')
    
    # Spaltenüberschriften benennen: Datum, ITEM_1, ITEM_2, usw.
    num_columns = df_input.shape[1]  # Anzahl der Spalten ermitteln
    column_names = ['Datum'] + [f"ITEM_{i}" for i in range(1, num_columns)]
    df_input.columns = column_names

    print("Füge HT-Spalte hinzu...")
    # Neue Spalte basierend auf Hochpreiszeiten hinzufügen
    df_input['HT'] = df_input['Datum'].apply(check_high_tariff)

    sum_columns = []  # Liste zum Speichern der SUM_X-Spalten

    # Gehe durch jede ITEM_X-Spalte (ITEM_1, ITEM_2, usw.)
    for item_col in df_input.columns[1:-1]:  # Überspringe 'Datum' und 'HT'
        item_mod_col = f'{item_col}_Mod'
        sum_col = f'Sum_{item_col}'
        sum_columns.append(sum_col)  # Speichere die SUM_X-Spalten
        
        # Liste zum Sammeln der Werte während der HT-Phasen
        ht_values = []

        print(f"Bearbeite Spalte: {item_col}")
        
        # Neue Spalte für "ITEM_X_Mod" erstellen
        df_input[item_mod_col] = 0.0  # Standardwert 0,0

        # Gehe durch jede Zeile und verschiebe nur die Werte aus HT-Phasen
        for idx in range(len(df_input)):
            if df_input.loc[idx, 'HT'] == 'HT':
                # Werte von ITEM_X während der HT-Phase sammeln
                ht_values.append(df_input.loc[idx, item_col])
                # Setze den Wert in der Spalte "ITEM_X_Mod" auf 0,0 in der HT-Phase
                df_input.loc[idx, item_mod_col] = 0.0
            elif df_input.loc[idx, 'HT'] == '' and ht_values:
                # Entferne führende 0,0-Werte vor dem Einfügen
                ht_values = remove_leading_zeros(ht_values)
                # Falls keine HT-Phase: Verschiebe nur die HT-Werte
                df_input.loc[idx, item_mod_col] = ht_values.pop(0) if ht_values else 0.0

        # Neue Spalte für die Summe von "ITEM_X" und "ITEM_X_Mod" erstellen
        df_input[sum_col] = df_input[item_col] + df_input[item_mod_col]

        # Setze die Werte in der Spalte "Sum" auf 0,0, falls es eine HT-Phase ist
        df_input.loc[df_input['HT'] == 'HT', sum_col] = 0.0

        # Maximalwert festlegen
        max_value = 2.5

        # Gehe durch jede Zeile und überprüfe, ob die Summe den Maximalwert überschreitet
        for idx in range(len(df_input)):
            if df_input.loc[idx, sum_col] > max_value:
                # Berechne die Differenz
                excess = df_input.loc[idx, sum_col] - max_value
                # Setze den Wert auf das Maximum, explizite Typumwandlung zu float
                df_input.loc[idx, sum_col] = float(max_value)
                # Verteile die Differenz degressiv auf die folgenden Zeilen
                df_input = distribute_excess(df_input, idx, excess, max_value, sum_col)

    # Lösche alle Spalten außer 'Datum' und den SUM_X-Spalten
    print("Lösche nicht benötigte Spalten...")
    df_output = df_input[['Datum'] + sum_columns]

    # Benenne die SUM_X-Spalten nach den ursprünglichen ITEM_X-Spalten
    rename_columns = {f'Sum_ITEM_{i}': f'ITEM_{i}' for i in range(1, num_columns)}
    df_output.rename(columns=rename_columns, inplace=True)

    # Speichern der Datei im Output-Ordner ohne Spaltenüberschriften
    output_file_path = os.path.join(output_folder, file_name)
    print(f"Speichern der Output-Datei: {file_name}")
    df_output.to_csv(output_file_path, index=False, header=False, sep=';', decimal=',')

    # Berechne die Summe jeder Spalte für die Input-Datei
    print("Berechne Summen für die Input-Datei...")
    input_sums = df_input[column_names[1:]].sum()

    # Berechne die Summe jeder Spalte für die Output-Datei
    print("Berechne Summen für die Output-Datei...")
    output_sums = df_output[rename_columns.values()].sum()

    # Ausgabe der Summen für Vergleich
    print(f"Summen für {file_name}:")
    print("Input-Datei:")
    print(input_sums)
    print("\nOutput-Datei:")
    print(output_sums)
    print("\n")

print("Verarbeitung abgeschlossen.")
